{"ast":null,"code":"import _slicedToArray from \"C:\\\\upload-app-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\upload-app-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { useReducer, useRef, useEffect } from 'react';\nconst api = {\n  uploadFile() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, 550);\n    });\n  }\n\n};\n\nconst logUploadedFile = (num, color = 'green') => {\n  const msg = \"%cUploaded \".concat(num, \" files.\");\n  const style = \"color:\".concat(color, \";font-weight:bold;\");\n  console.log(msg, style);\n}; // Constants\n\n\nconst IDLE = 'IDLE';\nconst LOADED = 'LOADED';\nconst INIT = 'INIT';\nconst PENDING = 'PENDING';\nconst FILES_UPLOADED = 'FILES_UPLOADED';\nconst UPLOAD_ERROR = 'UPLOAD_ERROR';\nconst initialState = {\n  files: [],\n  fileNames: [],\n  pending: [],\n  next: null,\n  uploading: false,\n  uploaded: {},\n  uploadError: null,\n  status: IDLE\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'load':\n      return _objectSpread({}, state, {\n        files: action.files,\n        fileNames: action.fileNames,\n        status: LOADED\n      });\n\n    case 'submit':\n      return _objectSpread({}, state, {\n        uploading: true,\n        pending: state.files,\n        status: INIT\n      });\n\n    case 'next':\n      return _objectSpread({}, state, {\n        next: action.next,\n        status: PENDING\n      });\n\n    case 'file-uploaded':\n      return _objectSpread({}, state, {\n        next: null,\n        pending: action.pending,\n        uploaded: _objectSpread({}, state.uploaded, {\n          [action.prev.id]: action.prev.file\n        })\n      });\n\n    case 'files-uploaded':\n      return _objectSpread({}, state, {\n        uploading: false,\n        status: FILES_UPLOADED\n      });\n\n    case 'set-upload-error':\n      return _objectSpread({}, state, {\n        uploadError: action.error,\n        status: UPLOAD_ERROR\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst useApp = ({\n  inputRef\n}) => {\n  const _useReducer = useReducer(reducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (state.files.length) {\n      dispatch({\n        type: 'submit'\n      });\n    } else {\n      window.alert(\"You don't have any files loaded.\");\n    }\n  };\n\n  const onChange = e => {\n    e.persist();\n\n    if (e.target.files.length) {\n      const arrFiles = Array.from(e.target.files);\n      const fileNames = [];\n      const files = arrFiles.reduce((acc, file) => {\n        if (!state.fileNames.includes(file.name)) {\n          fileNames.push(file.name);\n          const src = window.URL.createObjectURL(file);\n          acc.push({\n            file,\n            id: file.name,\n            src\n          });\n        }\n\n        return acc;\n      }, []);\n      const nextFiles = [...state.files, ...files];\n      dispatch({\n        type: 'load',\n        files: nextFiles,\n        fileNames\n      });\n    }\n  };\n\n  const triggerInput = e => {\n    e.persist();\n    inputRef.current.click();\n  };\n\n  const getFileUploaderProps = opts => _objectSpread({\n    inputRef,\n    triggerInput,\n    onChange,\n    status: state.status\n  }, opts); // Sets the next file when it detects that its ready to go\n\n\n  useEffect(() => {\n    if (state.pending.length && state.next == null) {\n      const next = state.pending[0];\n      dispatch({\n        type: 'next',\n        next\n      });\n    }\n  }, [state.next, state.pending]);\n  const countRef = useRef(0); // Processes the next pending thumbnail when ready\n\n  useEffect(() => {\n    if (state.pending.length && state.next) {\n      const next = state.next;\n      api.uploadFile(next).then(() => {\n        const prev = next;\n        logUploadedFile(++countRef.current);\n        const pending = state.pending.slice(1);\n        dispatch({\n          type: 'file-uploaded',\n          prev,\n          pending\n        });\n      }).catch(error => {\n        console.error(error);\n        dispatch({\n          type: 'set-upload-error',\n          error\n        });\n      });\n    }\n  }, [state]); // Ends the upload process\n\n  useEffect(() => {\n    if (!state.pending.length && state.uploading) {\n      dispatch({\n        type: 'files-uploaded'\n      });\n    }\n  }, [state.pending.length, state.uploading]);\n  return _objectSpread({}, state, {\n    onSubmit,\n    onChange,\n    triggerInput,\n    getFileUploaderProps\n  });\n};\n\nexport default useApp;","map":{"version":3,"sources":["C:\\upload-app-master\\src\\useApp.js"],"names":["useReducer","useRef","useEffect","api","uploadFile","Promise","resolve","setTimeout","logUploadedFile","num","color","msg","style","console","log","IDLE","LOADED","INIT","PENDING","FILES_UPLOADED","UPLOAD_ERROR","initialState","files","fileNames","pending","next","uploading","uploaded","uploadError","status","reducer","state","action","type","prev","id","file","error","useApp","inputRef","dispatch","onSubmit","e","preventDefault","length","window","alert","onChange","persist","target","arrFiles","Array","from","reduce","acc","includes","name","push","src","URL","createObjectURL","nextFiles","triggerInput","current","click","getFileUploaderProps","opts","countRef","then","slice","catch"],"mappings":"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","sourcesContent":["import { useReducer, useRef, useEffect } from 'react'\n\nconst api = {\n  uploadFile() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve()\n      }, 550)\n    })\n  },\n}\n\nconst logUploadedFile = (num, color = 'green') => {\n  const msg = `%cUploaded ${num} files.`\n  const style = `color:${color};font-weight:bold;`\n  console.log(msg, style)\n}\n\n// Constants\nconst IDLE = 'IDLE'\nconst LOADED = 'LOADED'\nconst INIT = 'INIT'\nconst PENDING = 'PENDING'\nconst FILES_UPLOADED = 'FILES_UPLOADED'\nconst UPLOAD_ERROR = 'UPLOAD_ERROR'\n\nconst initialState = {\n  files: [],\n  fileNames: [],\n  pending: [],\n  next: null,\n  uploading: false,\n  uploaded: {},\n  uploadError: null,\n  status: IDLE,\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'load':\n      return {\n        ...state,\n        files: action.files,\n        fileNames: action.fileNames,\n        status: LOADED,\n      }\n    case 'submit':\n      return { ...state, uploading: true, pending: state.files, status: INIT }\n    case 'next':\n      return {\n        ...state,\n        next: action.next,\n        status: PENDING,\n      }\n    case 'file-uploaded':\n      return {\n        ...state,\n        next: null,\n        pending: action.pending,\n        uploaded: {\n          ...state.uploaded,\n          [action.prev.id]: action.prev.file,\n        },\n      }\n    case 'files-uploaded':\n      return { ...state, uploading: false, status: FILES_UPLOADED }\n    case 'set-upload-error':\n      return { ...state, uploadError: action.error, status: UPLOAD_ERROR }\n    default:\n      return state\n  }\n}\n\nconst useApp = ({ inputRef }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const onSubmit = (e) => {\n    e.preventDefault()\n    if (state.files.length) {\n      dispatch({ type: 'submit' })\n    } else {\n      window.alert(\"You don't have any files loaded.\")\n    }\n  }\n\n  const onChange = (e) => {\n    e.persist()\n    if (e.target.files.length) {\n      const arrFiles = Array.from(e.target.files)\n      const fileNames = []\n      const files = arrFiles.reduce((acc, file) => {\n        if (!state.fileNames.includes(file.name)) {\n          fileNames.push(file.name)\n          const src = window.URL.createObjectURL(file)\n          acc.push({ file, id: file.name, src })\n        }\n        return acc\n      }, [])\n      const nextFiles = [...state.files, ...files]\n      dispatch({ type: 'load', files: nextFiles, fileNames })\n    }\n  }\n\n  const triggerInput = (e) => {\n    e.persist()\n    inputRef.current.click()\n  }\n\n  const getFileUploaderProps = (opts) => ({\n    inputRef,\n    triggerInput,\n    onChange,\n    status: state.status,\n    ...opts,\n  })\n\n  // Sets the next file when it detects that its ready to go\n  useEffect(() => {\n    if (state.pending.length && state.next == null) {\n      const next = state.pending[0]\n      dispatch({ type: 'next', next })\n    }\n  }, [state.next, state.pending])\n\n  const countRef = useRef(0)\n\n  // Processes the next pending thumbnail when ready\n  useEffect(() => {\n    if (state.pending.length && state.next) {\n      const { next } = state\n      api\n        .uploadFile(next)\n        .then(() => {\n          const prev = next\n          logUploadedFile(++countRef.current)\n          const pending = state.pending.slice(1)\n          dispatch({ type: 'file-uploaded', prev, pending })\n        })\n        .catch((error) => {\n          console.error(error)\n          dispatch({ type: 'set-upload-error', error })\n        })\n    }\n  }, [state])\n\n  // Ends the upload process\n  useEffect(() => {\n    if (!state.pending.length && state.uploading) {\n      dispatch({ type: 'files-uploaded' })\n    }\n  }, [state.pending.length, state.uploading])\n\n  return {\n    ...state,\n    onSubmit,\n    onChange,\n    triggerInput,\n    getFileUploaderProps,\n  }\n}\n\nexport default useApp\n"]},"metadata":{},"sourceType":"module"}