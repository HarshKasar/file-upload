{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\upload-app-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\upload-app-master\\\\src\\\\FileRow.js\";\nimport React from 'react';\nimport Spinner from './Spinner';\n\nconst getReadableSizeFromBytes = bytes => {\n  const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let l = 0;\n  let n = parseInt(bytes, 10) || 0;\n\n  while (n >= 1024 && ++l) n /= 1024; // include a decimal point and a tenths-place digit if presenting\n  // less than ten of KB or greater units\n\n\n  return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];\n};\n\nconst Caption = (_ref) => {\n  let children = _ref.children,\n      label = _ref.label,\n      block = _ref.block,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"label\", \"block\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    style: {\n      display: block ? 'block' : 'flex',\n      alignItems: 'center'\n    }\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    style: {\n      color: '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, label, \": \"), React.createElement(\"span\", {\n    style: {\n      color: '#2b8fba'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, children));\n};\n\nconst FileRow = ({\n  isUploaded,\n  isUploading,\n  file,\n  src,\n  id,\n  index\n}) => React.createElement(\"div\", {\n  style: {\n    opacity: isUploaded ? 0.2 : 1\n  },\n  className: \"file-row\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, isUploading && React.createElement(Spinner, {\n  center: true,\n  xs: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, \"Uploading...\"), React.createElement(\"div\", {\n  className: \"file-row-thumbarea\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  src: src,\n  alt: \"\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}), React.createElement(Caption, {\n  className: \"file-row-filename\",\n  label: \"File Name\",\n  block: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, file.name)), React.createElement(\"div\", {\n  className: \"file-row-additional-info\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, React.createElement(Caption, {\n  className: \"file-row-filesize\",\n  label: \"File Size\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, getReadableSizeFromBytes(file.size))));\n\nconst isEqual = (currProps, nextProps) => {\n  if (currProps.index !== nextProps.index) {\n    return false;\n  }\n\n  if (currProps.isUploaded !== nextProps.isUploaded) {\n    return false;\n  }\n\n  if (currProps.isUploading !== nextProps.isUploading) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(FileRow, isEqual);","map":{"version":3,"sources":["C:\\upload-app-master\\src\\FileRow.js"],"names":["React","Spinner","getReadableSizeFromBytes","bytes","units","l","n","parseInt","toFixed","Caption","children","label","block","rest","display","alignItems","color","FileRow","isUploaded","isUploading","file","src","id","index","opacity","name","size","isEqual","currProps","nextProps","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Spinner from './Spinner'\n\nconst getReadableSizeFromBytes = (bytes) => {\n  const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n  let l = 0\n  let n = parseInt(bytes, 10) || 0\n  while (n >= 1024 && ++l) n /= 1024\n  // include a decimal point and a tenths-place digit if presenting\n  // less than ten of KB or greater units\n  return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l]\n}\n\nconst Caption = ({ children, label, block, ...rest }) => (\n  <div\n    style={{ display: block ? 'block' : 'flex', alignItems: 'center' }}\n    {...rest}\n  >\n    <span style={{ color: '#fff' }}>{label}: </span>\n    <span style={{ color: '#2b8fba' }}>{children}</span>\n  </div>\n)\n\nconst FileRow = ({ isUploaded, isUploading, file, src, id, index }) => (\n  <div\n    style={{\n      opacity: isUploaded ? 0.2 : 1,\n    }}\n    className='file-row'\n  >\n    {isUploading && (\n      <Spinner center xs>\n        Uploading...\n      </Spinner>\n    )}\n    <div className='file-row-thumbarea'>\n      <img src={src} alt='' />\n      <Caption className='file-row-filename' label='File Name' block>\n        {file.name}\n      </Caption>\n    </div>\n    <div className='file-row-additional-info'>\n      <Caption className='file-row-filesize' label='File Size'>\n        {getReadableSizeFromBytes(file.size)}\n      </Caption>\n    </div>\n  </div>\n)\n\nconst isEqual = (currProps, nextProps) => {\n  if (currProps.index !== nextProps.index) {\n    return false\n  }\n  if (currProps.isUploaded !== nextProps.isUploaded) {\n    return false\n  }\n  if (currProps.isUploading !== nextProps.isUploading) {\n    return false\n  }\n  return true\n}\n\nexport default React.memo(FileRow, isEqual)\n"]},"metadata":{},"sourceType":"module"}