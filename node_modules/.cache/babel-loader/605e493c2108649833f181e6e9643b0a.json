{"ast":null,"code":"var _jsxFileName = \"C:\\\\upload-app-master\\\\src\\\\FileRow.js\";\nimport React from 'react';\nimport Spinner from './Spinner';\n\nconst getReadableSizeFromBytes = bytes => {\n  const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  let l = 0;\n  let n = parseInt(bytes, 10) || 0;\n\n  while (n >= 1024 && ++l) n /= 1024; // include a decimal point and a tenths-place digit if presenting\n  // less than ten of KB or greater units\n\n\n  return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];\n};\n\nconst Caption = _ref => {\n  let {\n    children,\n    label,\n    block,\n    ...rest\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    style: {\n      display: block ? 'block' : 'flex',\n      alignItems: 'center'\n    }\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, label, \": \"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: '#2b8fba'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, children));\n};\n\nconst FileRow = _ref2 => {\n  let {\n    isUploaded,\n    isUploading,\n    file,\n    src,\n    id,\n    index\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      opacity: isUploaded ? 0.2 : 1\n    },\n    className: \"file-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 3\n    }\n  }, isUploading && /*#__PURE__*/React.createElement(Spinner, {\n    center: true,\n    xs: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Uploading...\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-row-thumbarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: src,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Caption, {\n    className: \"file-row-filename\",\n    label: \"File Name\",\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, file.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-row-additional-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Caption, {\n    className: \"file-row-filesize\",\n    label: \"File Size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, getReadableSizeFromBytes(file.size))));\n};\n\nconst isEqual = (currProps, nextProps) => {\n  if (currProps.index !== nextProps.index) {\n    return false;\n  }\n\n  if (currProps.isUploaded !== nextProps.isUploaded) {\n    return false;\n  }\n\n  if (currProps.isUploading !== nextProps.isUploading) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default React.memo(FileRow, isEqual);","map":{"version":3,"names":["React","Spinner","getReadableSizeFromBytes","bytes","units","l","n","parseInt","toFixed","Caption","children","label","block","rest","display","alignItems","color","FileRow","isUploaded","isUploading","file","src","id","index","opacity","name","size","isEqual","currProps","nextProps","memo"],"sources":["C:/upload-app-master/src/FileRow.js"],"sourcesContent":["import React from 'react'\nimport Spinner from './Spinner'\n\nconst getReadableSizeFromBytes = (bytes) => {\n  const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n  let l = 0\n  let n = parseInt(bytes, 10) || 0\n  while (n >= 1024 && ++l) n /= 1024\n  // include a decimal point and a tenths-place digit if presenting\n  // less than ten of KB or greater units\n  return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l]\n}\n\nconst Caption = ({ children, label, block, ...rest }) => (\n  <div\n    style={{ display: block ? 'block' : 'flex', alignItems: 'center' }}\n    {...rest}\n  >\n    <span style={{ color: '#fff' }}>{label}: </span>\n    <span style={{ color: '#2b8fba' }}>{children}</span>\n  </div>\n)\n\nconst FileRow = ({ isUploaded, isUploading, file, src, id, index }) => (\n  <div\n    style={{\n      opacity: isUploaded ? 0.2 : 1,\n    }}\n    className='file-row'\n  >\n    {isUploading && (\n      <Spinner center xs>\n        Uploading...\n      </Spinner>\n    )}\n    <div className='file-row-thumbarea'>\n      <img src={src} alt='' />\n      <Caption className='file-row-filename' label='File Name' block>\n        {file.name}\n      </Caption>\n    </div>\n    <div className='file-row-additional-info'>\n      <Caption className='file-row-filesize' label='File Size'>\n        {getReadableSizeFromBytes(file.size)}\n      </Caption>\n    </div>\n  </div>\n)\n\nconst isEqual = (currProps, nextProps) => {\n  if (currProps.index !== nextProps.index) {\n    return false\n  }\n  if (currProps.isUploaded !== nextProps.isUploaded) {\n    return false\n  }\n  if (currProps.isUploading !== nextProps.isUploading) {\n    return false\n  }\n  return true\n}\n\nexport default React.memo(FileRow, isEqual)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}